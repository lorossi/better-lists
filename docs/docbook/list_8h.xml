<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_list_8h" xml:lang="en-US">
<title>src/list.h File Reference</title>
<indexterm><primary>src/list.h</primary></indexterm>
<para>

<para>GitHub repo: <link xlink:href="https://github.com/lorossi/better-lists">https://github.com/lorossi/better-lists</link> Simple linked list library made because I wanted to kill some time. By default, the data stored inside the list is int. define CHARLIST, STRINGLIST, FLOATLIST, DOUBLELIST, respectively to store chars, strings, floats and double. if you want to use some custom data (struct, for example) define CUSTOMTYPE as the type you want to store. Some functions (like printList) won&apos;t work. </para>

</para>
<programlisting>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;time.h&gt;
</programlisting>Include dependency graph for list.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="list_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
This graph shows which files directly or indirectly include this file:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="list_8h__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Data Structures    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structnode">node</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlist">list</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structiterator">iterator</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_list_8h_1af1f4f723604f38d702ee850c2e15aa7d"/>typedef int <emphasis role="strong">Data</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1ac09cf950484bd9550d14d602b0e5e7fb"/>typedef struct <link linkend="_structnode">node</link> <emphasis role="strong">Node</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1aa89b8bc105d9a09d4e7c06e8b34078a7"/>typedef struct <link linkend="_structlist">list</link> <emphasis role="strong">List</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1a868930f666b023086a7840713b49efcd"/>typedef struct <link linkend="_structiterator">iterator</link> <emphasis role="strong">Iterator</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_structlist">List</link> * <link linkend="_list_8h_1ac9382691bb8c711e981a01673b34febb">listCreate</link> ()</para>

<para>Creates and returns a list. </para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1ae6a2c0c8fc082c331eb6f9fef0df119d"/>void <emphasis role="strong">listDelete</emphasis> (<link linkend="_structlist">List</link> *<link linkend="_structlist">list</link>)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1a8a44966a352ebd6bbafffdb0c0d0775f"/>int <emphasis role="strong">listGetItem</emphasis> (<link linkend="_structlist">List</link> *<link linkend="_structlist">list</link>, union Data *destination, int index)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1a129ce2a4ba8730f36bfb31d530a2f891"/>int <emphasis role="strong">listGetFirstItem</emphasis> (<link linkend="_structlist">List</link> *<link linkend="_structlist">list</link>, union Data *destination)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1abc58ae30e58403b23986744c9a7db1f6"/>int <emphasis role="strong">listGetLastItem</emphasis> (<link linkend="_structlist">List</link> *<link linkend="_structlist">list</link>, union Data *destination)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1a7fd6d5d69881680e205665e57c645112"/>int <emphasis role="strong">listAddItem</emphasis> (<link linkend="_structlist">List</link> *<link linkend="_structlist">list</link>, union Data *destination, int position)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1a918e3874eebecce3cb516aa8da3bfcb9"/>int <emphasis role="strong">listAppend</emphasis> (<link linkend="_structlist">List</link> *<link linkend="_structlist">list</link>, union Data *destination)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1a7b76412e3efe1d3403ad96571dafec9f"/>int <emphasis role="strong">listPrepend</emphasis> (<link linkend="_structlist">List</link> *<link linkend="_structlist">list</link>, union Data *destination)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1ae18117c896013c2b9857304190cd4b68"/>int <emphasis role="strong">listReplaceItem</emphasis> (<link linkend="_structlist">List</link> *<link linkend="_structlist">list</link>, union Data *new_value, int index)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1ac3147fe2fcdebcb87c7817b2b6b9267b"/>int <emphasis role="strong">listReplaceItemByValue</emphasis> (<link linkend="_structlist">List</link> *<link linkend="_structlist">list</link>, union Data *old_value, union Data *new_value)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1ab3c35da6c32278489aa3c96570ca1f62"/>int <emphasis role="strong">listCountReplace</emphasis> (<link linkend="_structlist">List</link> *<link linkend="_structlist">list</link>, union Data *old_value, union Data *new_value, int replace_count)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1af34085959610df9080e69abb32d3d8de"/>int <emphasis role="strong">listRemoveItem</emphasis> (<link linkend="_structlist">List</link> *<link linkend="_structlist">list</link>, union Data *destination, int index)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1a88d73822cbfe6d893d110e63184d96a1"/>int <emphasis role="strong">listRemoveItemByValue</emphasis> (<link linkend="_structlist">List</link> *<link linkend="_structlist">list</link>, union Data *old_value)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1aaacb7233ef2c4e307d2273060c828a18"/>int <emphasis role="strong">listCountRemove</emphasis> (<link linkend="_structlist">List</link> *<link linkend="_structlist">list</link>, union Data *old_value, int remove_count)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1a8d3bd42c87ac11237eba45c0e5608cdb"/>int <emphasis role="strong">listPop</emphasis> (<link linkend="_structlist">List</link> *<link linkend="_structlist">list</link>, union Data *last)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1ae154718711d87841db9726a7acefb6b1"/>int <emphasis role="strong">listShift</emphasis> (<link linkend="_structlist">List</link> *<link linkend="_structlist">list</link>, union Data *destination)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1a291aff181cfcb20a4f8dbf94c9e7d06e"/>int <emphasis role="strong">listSwap</emphasis> (<link linkend="_structlist">List</link> *<link linkend="_structlist">list</link>, int first_index, int second_index)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1a9964d9b6db29cc0790c11faa94782ab1"/>int <emphasis role="strong">dataInList</emphasis> (<link linkend="_structlist">List</link> *<link linkend="_structlist">list</link>, union Data *destination)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1ac646d4d267499d2be3e65e6a174e1a1f"/>int <emphasis role="strong">listToArray</emphasis> (<link linkend="_structlist">List</link> *<link linkend="_structlist">list</link>, union Data *array)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1acf1e5ee3276de056c1defce70e222099"/>void <emphasis role="strong">printList</emphasis> (<link linkend="_structlist">List</link> *<link linkend="_structlist">list</link>, char *end)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1acddb3a1844ad330ea6da816e20320efe"/>void <emphasis role="strong">printListReverse</emphasis> (<link linkend="_structlist">List</link> *<link linkend="_structlist">list</link>, char *end)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1a39206e789a23b4591f5c3e77cbdde4e8"/>int <emphasis role="strong">listGetSize</emphasis> (<link linkend="_structlist">List</link> *<link linkend="_structlist">list</link>)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1a5292761e3bccf28dd87b0a53ddea92a1"/>int <emphasis role="strong">listSort</emphasis> (<link linkend="_structlist">List</link> *<link linkend="_structlist">list</link>, int reverse)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1aaf0fdf148d913473d1978b690d90a6a7"/>int <emphasis role="strong">listShuffle</emphasis> (<link linkend="_structlist">List</link> *<link linkend="_structlist">list</link>)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1aaeabc694cf31771e4d5935578a34e313"/><link linkend="_structiterator">Iterator</link> * <emphasis role="strong">iteratorCreate</emphasis> (<link linkend="_structlist">List</link> *<link linkend="_structlist">list</link>, int start)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1a37cd7e07b1a9369cc62d1e01afdac239"/>void <emphasis role="strong">iteratorDelete</emphasis> (<link linkend="_structiterator">Iterator</link> *it)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1a8d1ef40a5d50f8bfbfdef2c286c2894b"/>int <emphasis role="strong">iteratorEnded</emphasis> (<link linkend="_structiterator">Iterator</link> *it)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1a28b930883b77e968e2e2d559d1ad5b5a"/>int <emphasis role="strong">iteratorStarted</emphasis> (<link linkend="_structiterator">Iterator</link> *it)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1ad14cffd7fcf062235193a51fb0bc9b0f"/>int <emphasis role="strong">iteratorNext</emphasis> (<link linkend="_structiterator">Iterator</link> *it)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1ac49954a579a1fbb0379349fe77a87f2e"/>int <emphasis role="strong">iteratorPrevious</emphasis> (<link linkend="_structiterator">Iterator</link> *it)</para>
</listitem>
            <listitem><para><anchor xml:id="_list_8h_1ad3fef6f5ebef0c0329410899cf54eec0"/>int <emphasis role="strong">iteratorGetData</emphasis> (<link linkend="_structiterator">Iterator</link> *it, union Data *destination)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>GitHub repo: <link xlink:href="https://github.com/lorossi/better-lists">https://github.com/lorossi/better-lists</link> Simple linked list library made because I wanted to kill some time. By default, the data stored inside the list is int. define CHARLIST, STRINGLIST, FLOATLIST, DOUBLELIST, respectively to store chars, strings, floats and double. if you want to use some custom data (struct, for example) define CUSTOMTYPE as the type you want to store. Some functions (like printList) won&apos;t work. </para>

<para><formalpara><title>Author</title>

<para>Lorenzo Rossi </para>
</formalpara>
<formalpara><title>Date</title>

<para>26/10/2021 </para>
</formalpara>
<formalpara><title>Version</title>

<para>1.1.0</para>
</formalpara>
</para>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_list_8h_1ac9382691bb8c711e981a01673b34febb"/>    <section>
    <title>listCreate()</title>
<indexterm><primary>listCreate</primary><secondary>list.h</secondary></indexterm>
<indexterm><primary>list.h</primary><secondary>listCreate</secondary></indexterm>
<para><computeroutput><link linkend="_structlist">List</link>* listCreate ( )</computeroutput></para><para>

<para>Creates and returns a list. </para>
</para>

<para><formalpara><title>Returns</title>

<para>List* The new (empty) list </para>
</formalpara>
</para>
<para>
Definition at line 268 of file list.c.</para>
</section>
</section>
</section>
